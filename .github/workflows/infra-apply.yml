name: step1-infra-apply

on:
  workflow_dispatch: {}

permissions:
  contents: read   # no id-token needed when using client secret

concurrency:
  group: step1-infra-apply
  cancel-in-progress: false

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      # Terraform variables (adjust or move to terraform.tfvars)
      TF_VAR_rg_name:       "rg-appsvc-internal"
      TF_VAR_location:      "eastus2"
      TF_VAR_vnet_cidr:     "10.20.0.0/16"
      TF_VAR_snet_pe_cidr:  "10.20.1.0/24"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # âœ… Preflight: ensure org/repo secrets are accessible (non-empty)
      - name: Assert required secrets exist
        shell: bash
        run: |
          missing=0
          [ -z "${{ secrets.ARM_CLIENT_ID }}" ]       && echo "::error::ARM_CLIENT_ID is missing/inaccessible" && missing=1
          [ -z "${{ secrets.ARM_CLIENT_SECRET }}" ]   && echo "::error::ARM_CLIENT_SECRET is missing/inaccessible" && missing=1
          [ -z "${{ secrets.ARM_SUBSCRIPTION_ID }}" ] && echo "::error::ARM_SUBSCRIPTION_ID is missing/inaccessible" && missing=1
          [ -z "${{ secrets.ARM_TENANT_ID }}" ]       && echo "::error::ARM_TENANT_ID is missing/inaccessible" && missing=1
          exit $missing

      - name: Azure login (client secret)
        uses: azure/login@v1
        with:
          client-id:       ${{ secrets.ARM_CLIENT_ID }}
          tenant-id:       ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          client-secret:   ${{ secrets.ARM_CLIENT_SECRET }}  # forces client-secret auth

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init / Plan / Apply
        working-directory: infra
        run: |
          terraform init -upgrade
          terraform fmt -check
          terraform validate
          terraform plan -out tfplan
          terraform apply -auto-approve tfplan

      - name: Capture outputs
        id: tfout
        working-directory: infra
        run: |
          echo "RG=$(terraform output -raw resource_group_name)"    >> $GITHUB_OUTPUT
          echo "APP=$(terraform output -raw webapp_name)"           >> $GITHUB_OUTPUT
          echo "PE_IP=$(terraform output -raw private_endpoint_ip)" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "Resource Group : ${{ steps.tfout.outputs.RG }}"
          echo "Web App        : ${{ steps.tfout.outputs.APP }}"
          echo "Private EP IP  : ${{ steps.tfout.outputs.PE_IP }}"
