name: step1-infra-apply
on:
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: step1-infra-apply
  cancel-in-progress: false

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      # TF vars for infra/main.tf
      TF_VAR_rg_name:       "rg-appsvc-internal"
      TF_VAR_location:      "eastus2"
      TF_VAR_vnet_cidr:     "10.20.0.0/16"
      TF_VAR_snet_pe_cidr:  "10.20.1.0/24"

    steps:
      - uses: actions/checkout@v4

      # Sanity: ensure org/repo secrets are accessible
      - name: Assert required secrets exist
        shell: bash
        run: |
          [ -z "${{ secrets.ARM_CLIENT_ID }}" ]       && { echo "::error::ARM_CLIENT_ID missing"; exit 1; }
          [ -z "${{ secrets.ARM_CLIENT_SECRET }}" ]   && { echo "::error::ARM_CLIENT_SECRET missing"; exit 1; }
          [ -z "${{ secrets.ARM_SUBSCRIPTION_ID }}" ] && { echo "::error::ARM_SUBSCRIPTION_ID missing"; exit 1; }
          [ -z "${{ secrets.ARM_TENANT_ID }}" ]       && { echo "::error::ARM_TENANT_ID missing"; exit 1; }
          echo "All good."

      # 🔐 Raw Azure CLI login (service principal) — NO OIDC involved
      - name: Azure CLI login (service principal)
        shell: bash
        run: |
          az login --service-principal \
            --username "${{ secrets.ARM_CLIENT_ID }}" \
            --password "${{ secrets.ARM_CLIENT_SECRET }}" \
            --tenant   "${{ secrets.ARM_TENANT_ID }}"
          az account set --subscription "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          echo "Logged in as:"
          az account show --output table

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init / Plan / Apply
        working-directory: infra
        run: |
          terraform init -upgrade
          terraform fmt -check
          terraform validate
          terraform plan -out tfplan
          terraform apply -auto-approve tfplan

      - name: Capture outputs
        id: tfout
        working-directory: infra
        run: |
          echo "RG=$(terraform output -raw resource_group_name)"    >> $GITHUB_OUTPUT
          echo "APP=$(terraform output -raw webapp_name)"           >> $GITHUB_OUTPUT
          echo "PE_IP=$(terraform output -raw private_endpoint_ip)" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "Resource Group : ${{ steps.tfout.outputs.RG }}"
          echo "Web App        : ${{ steps.tfout.outputs.APP }}"
          echo "Private EP IP  : ${{ steps.tfout.outputs.PE_IP }}"
